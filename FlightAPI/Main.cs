/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘FlightAPI.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir18 = null;
        public BindDirection bind_dir19 = null;
        public BindDirection bind_dir20 = null;
        public BindDirection bind_dir21 = null;
        public BindDirection bind_dir22 = null;
        public BindDirection bind_dir23 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity56 = null;
        public BindDirection bind_dir24 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity56_Policy = null;
        public BindDirection bind_dir25 = null;
        public BindDirection bind_dir26 = null;
        public BindDirection bind_dir27 = null;
        public BindDirection bind_dir28 = null;
        public BindDirection bind_dir29 = null;
        public BindDirection bind_dir30 = null;
        public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        public BindDirection bind_dir33 = null;
        public BindDirection bind_dir34 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity52 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity52");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity54 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity54");
            _flow.DataExporterCloseActivity55 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity55");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity53 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity53");
            _flow.Sequence49 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence49");
            _flow.StServiceCallActivity48 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity48");
            _flow.ReportMessageActivity47 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity47");
            _flow.DateIncActivity11 = new HP.ST.Ext.BasicActivities.DateIncActivity(_context,"DateIncActivity11");
            _flow.DbOpenConnection16 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection16");
            _flow.Loop42 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop42Input>(_context,"Loop42",LoopType.ForEach);
            _flow.StServiceCallActivity25 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity25");
            _flow.Loop33 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop33Input>(_context,"Loop33",LoopType.For);
            _flow.DbCloseConnection34 = new HP.ST.Ext.DatabaseRunTime.DbCloseConnection(_context,"DbCloseConnection34");
            this.DataCursorActivity56 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity56");
            this.DataCursorActivity56_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence50 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence50");
            _flow.Sequence51 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence51");
            _flow.DbFetchData18 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData18");
            _flow.StServiceCallActivity9 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity9");
            _flow.StServiceCallActivity13 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity13");
            _flow.ConcatenateStringsActivity44 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity44");
            _flow.ReportMessageActivity43 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity43");
            _flow.StServiceCallActivity32 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity32");
            _flow.DataFetchActivity52.Comment = @"";
            _flow.DataFetchActivity52.IconPath = @"";
            _flow.DataFetchActivity52.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity52.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity52_QueryParameters_Document = new XmlDocument();
            DataFetchActivity52_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity52Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>5f9a8221-f4dc-45ba-be58-5444057e7563</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>GetFlights_Input_1!MainDetails</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>GetFlights_Input_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{GetFlights_Input_1!MainDetails.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>MainDetails$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity52_QueryParameters_Document.LoadXml(xmlDataFetchActivity52Params);
            _flow.DataFetchActivity52.QueryParameters = DataFetchActivity52_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("GetFlights_Input_1!MainDetails", _flow.DataFetchActivity52);
            this.Activities.Add (_flow.DataFetchActivity52);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence49);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity54.Comment = @"";
            _flow.DataExporterActivity54.IconPath = @"";
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter19 = new VTDObjectGetter(pi36);
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter18 = new VTDObjectSetter(pi37);
            binding_setter18 = new StringFormaterDecorator(binding_setter18,"{Step.DataFetchActivity52.OutTable}");
            bind_dir18 = new BindDirection(_flow.DataFetchActivity52,binding_getter19,binding_setter18,BindTargetType.ToInProperty);
            _flow.DataExporterActivity54.InDirections.Add(bind_dir18);
            this.Activities.Add (_flow.DataExporterActivity54);
            _flow.DataExporterCloseActivity55.Comment = @"";
            _flow.DataExporterCloseActivity55.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity55);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity53.Comment = @"";
            _flow.DataDisconnectActivity53.IconPath = @"";
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter20 = new VTDObjectGetter(pi38);
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter19 = new VTDObjectSetter(pi39);
            binding_setter19 = new StringFormaterDecorator(binding_setter19,"{Step.DataFetchActivity52.OutTable}");
            bind_dir19 = new BindDirection(_flow.DataFetchActivity52,binding_getter20,binding_setter19,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity53.InDirections.Add(bind_dir19);
            this.Activities.Add (_flow.DataDisconnectActivity53);
            _flow.Sequence49.Comment = @"";
            _flow.Sequence49.IconPath = @"";
            _flow.Sequence49.Name = @"Sequence49";
            _flow.Sequence49.Activities.Add (_flow.StServiceCallActivity48);
            _flow.Sequence49.Activities.Add (_flow.ReportMessageActivity47);
            _flow.Sequence49.Activities.Add (_flow.DateIncActivity11);
            _flow.Sequence49.Activities.Add (_flow.DbOpenConnection16);
            _flow.Sequence49.Activities.Add (_flow.Loop42);
            _flow.Sequence49.Activities.Add (_flow.StServiceCallActivity25);
            _flow.Sequence49.Activities.Add (_flow.Loop33);
            _flow.Sequence49.Activities.Add (_flow.DbCloseConnection34);
            XmlDocument StServiceCallActivity48_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity48_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity48_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>London</DepartureCity><ArrivalCity>Portland</ArrivalCity><FlightDate>2021-08-24T00:00:00-05:00</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity48.InputEnvelope = StServiceCallActivity48_InputEnvelope_Document;
            _flow.StServiceCallActivity48.Comment = @"";
            _flow.StServiceCallActivity48.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity48.Name = @"GetFlights";
            _flow.StServiceCallActivity48.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity48.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity48.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity48.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity48.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity48.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity48.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity48.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity48.Operation = @"GetFlights";
            _flow.StServiceCallActivity48.IsOneWay = false;
            _flow.StServiceCallActivity48.SendRequestToService=true;
            _flow.StServiceCallActivity48.FaultExpected=false;
            _flow.StServiceCallActivity48.IsAsync=false;
            _flow.StServiceCallActivity48.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity48.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity48_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity48_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity48_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity48.ChannelBindingXml = StServiceCallActivity48_ChannelBindingXml;
            XmlDocument StServiceCallActivity48_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity48_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity48_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity48.ExpectedOutputAttachments = StServiceCallActivity48_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity48_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity48_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity48_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity48.ExpectedFaultProperties = StServiceCallActivity48_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity48_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity48_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity48_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity48.ExpectedOutputProperties = StServiceCallActivity48_ExpectedOutputProperties_Document;
            set_StServiceCallActivity48_checkpoints(_flow.StServiceCallActivity48);
            _flow.ReportMessageActivity47.Status = @"Done";
            _flow.ReportMessageActivity47.Message = @"{ENV:CurrentDate}";
            _flow.ReportMessageActivity47.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity47.Comment = @"";
            _flow.ReportMessageActivity47.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity47.Name = @"Report Message47";
            VTDPropertyInfoBase pi40 = new VTDPropertyInfoBase("CurrentDate");
            VTDBaseGetter binding_getter21 = new EnvironmentVariableGetter(pi40);
            VTDPropertyInfoBase pi41 = new VTDPropertyInfoBase("Message");
            VTDBaseSetter binding_setter20 = new VTDObjectSetter(pi41);
            binding_setter20 = new StringFormaterDecorator(binding_setter20,"{ENV:CurrentDate}");
            bind_dir20 = new BindDirection(_flow.StartActivity1,binding_getter21,binding_setter20,BindTargetType.ToInProperty);
            _flow.ReportMessageActivity47.InDirections.Add(bind_dir20);
            _flow.DateIncActivity11.OriginalDate =  new DateTime(1,1,1,0,0,0,0);
            _flow.DateIncActivity11.OriginalFormat = @"Short Date/Time";
            _flow.DateIncActivity11.Units = @"Days";
            _flow.DateIncActivity11.Amount = (int)1;
            _flow.DateIncActivity11.Comment = @"";
            _flow.DateIncActivity11.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_dateinc.png";
            _flow.DateIncActivity11.Name = @"Increment Date/Time";
            VTDPropertyInfoBase pi42 = new VTDPropertyInfoBase("CurrentDate");
            VTDBaseGetter binding_getter22 = new EnvironmentVariableGetter(pi42);
            VTDPropertyInfoBase pi43 = new VTDPropertyInfoBase("OriginalDate");
            VTDBaseSetter binding_setter21 = new VTDObjectSetter(pi43);
            bind_dir21 = new BindDirection(_flow.StartActivity1,binding_getter22,binding_setter21,BindTargetType.ToInProperty);
            _flow.DateIncActivity11.InDirections.Add(bind_dir21);
            _flow.DbOpenConnection16.ConnectionString = @"DSN=Flight;";
            _flow.DbOpenConnection16.Password = @"";
            _flow.DbOpenConnection16.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection16.Comment = @"";
            _flow.DbOpenConnection16.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection16.Name = @"Open Connection";
            _flow.Loop42.ConditionAsString = @"For each item in {DataSource.GetFlights_Input_1!MainDetails}";
            _flow.Loop42.NumberOfIterations = (int)0;
            _flow.Loop42.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity56.IsAtEndPosition;
            };
            _flow.Loop42.Comment = @"";
            _flow.Loop42.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop42.Name = @"Create Loop";
            _flow.Loop42.Activities.Add (this.DataCursorActivity56);
            _flow.Loop42.Activities.Add (_flow.Sequence50);
            XmlDocument StServiceCallActivity25_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity25_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity25_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><CustomerName>John Smith</CustomerName></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity25.InputEnvelope = StServiceCallActivity25_InputEnvelope_Document;
            _flow.StServiceCallActivity25.Comment = @"";
            _flow.StServiceCallActivity25.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity25.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity25.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity25.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity25.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity25.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity25.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity25.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity25.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity25.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity25.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity25.IsOneWay = false;
            _flow.StServiceCallActivity25.SendRequestToService=true;
            _flow.StServiceCallActivity25.FaultExpected=false;
            _flow.StServiceCallActivity25.IsAsync=false;
            _flow.StServiceCallActivity25.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity25.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity25_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity25_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity25_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity25.ChannelBindingXml = StServiceCallActivity25_ChannelBindingXml;
            XmlDocument StServiceCallActivity25_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity25_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity25_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity25.ExpectedOutputAttachments = StServiceCallActivity25_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity25_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity25_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity25_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity25.ExpectedFaultProperties = StServiceCallActivity25_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity25_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity25_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity25_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightOrdersResult><FlightOrder><CustomerName p1:nil=""true"" /><OrderNumber /></FlightOrder></GetFlightOrdersResult></GetFlightOrdersResponse></Body></Envelope>");
            _flow.StServiceCallActivity25.ExpectedOutputProperties = StServiceCallActivity25_ExpectedOutputProperties_Document;
            _flow.Loop33.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop33.NumberOfIterations = (int)1;
            _flow.Loop33.Comment = @"";
            _flow.Loop33.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop33.Name = @"Delete Loop";
            VTDPropertyInfoBase pi44 = new VTDPropertyInfoBase("OutputEnvelope","count(/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'])");
            VTDBaseGetter binding_getter23 = new VTDXPathGetter(pi44);
            VTDPropertyInfoBase pi45 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter22 = new VTDObjectSetter(pi45);
            bind_dir22 = new BindDirection(_flow.StServiceCallActivity25,binding_getter23,binding_setter22,BindTargetType.ToInProperty);
            _flow.Loop33.InDirections.Add(bind_dir22);
            _flow.Loop33.Activities.Add (_flow.Sequence51);
            _flow.DbCloseConnection34.Comment = @"";
            _flow.DbCloseConnection34.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_close_connection.png";
            _flow.DbCloseConnection34.Name = @"Close Connection";
            VTDPropertyInfoBase pi46 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter24 = new VTDObjectGetter(pi46);
            VTDPropertyInfoBase pi47 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter23 = new VTDObjectSetter(pi47);
            bind_dir23 = new BindDirection(_flow.DbOpenConnection16,binding_getter24,binding_setter23,BindTargetType.ToInProperty);
            _flow.DbCloseConnection34.InDirections.Add(bind_dir23);
            this.DataCursorActivity56.Comment = @"";
            this.DataCursorActivity56.IconPath = @"";
            VTDPropertyInfoBase pi48 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter25 = new VTDObjectGetter(pi48);
            VTDPropertyInfoBase pi49 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter24 = new VTDObjectSetter(pi49);
            binding_setter24 = new StringFormaterDecorator(binding_setter24,"{Step.DataFetchActivity52.OutTable}");
            bind_dir24 = new BindDirection(_flow.DataFetchActivity52,binding_getter25,binding_setter24,BindTargetType.ToInProperty);
            this.DataCursorActivity56.InDirections.Add(bind_dir24);
            this.DataCursorActivity56_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity56_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity56_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity56_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity56_Policy.StartCondition.Value = "";
            this.DataCursorActivity56_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity56_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity56_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity56_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity56_Policy.EndCondition.Value = "";
            this.DataCursorActivity56_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity56_Policy.StepSize = 1;
            this.DataCursorActivity56_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity56.Policy = this.DataCursorActivity56_Policy;
            this.DataCursorActivity56.ReportStepData = false;
            _flow.Loop42.BeforeExecuteStepEvent += this.DataCursorActivity56.ResetCursor;
            _flow.Sequence50.Comment = @"";
            _flow.Sequence50.IconPath = @"";
            _flow.Sequence50.Name = @"Sequence50";
            _flow.Sequence50.Activities.Add (_flow.DbFetchData18);
            _flow.Sequence50.Activities.Add (_flow.StServiceCallActivity9);
            _flow.Sequence50.Activities.Add (_flow.StServiceCallActivity13);
            _flow.Sequence50.Activities.Add (_flow.ConcatenateStringsActivity44);
            _flow.Sequence50.Activities.Add (_flow.ReportMessageActivity43);
            _flow.Sequence51.Comment = @"";
            _flow.Sequence51.IconPath = @"";
            _flow.Sequence51.Name = @"Sequence51";
            _flow.Sequence51.Activities.Add (_flow.StServiceCallActivity32);
            _flow.DbFetchData18.QueryString = @"SELECT OrderNumber FROM Orders ORDER BY OrderNumber DESC LIMIT 1;";
            _flow.DbFetchData18.Timeout = (int)30;
            _flow.DbFetchData18.Comment = @"";
            _flow.DbFetchData18.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData18.Name = @"Select Data";
            VTDPropertyInfoBase pi50 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter26 = new VTDObjectGetter(pi50);
            VTDPropertyInfoBase pi51 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter25 = new VTDObjectSetter(pi51);
            bind_dir25 = new BindDirection(_flow.DbOpenConnection16,binding_getter26,binding_setter25,BindTargetType.ToInProperty);
            _flow.DbFetchData18.InDirections.Add(bind_dir25);
            XmlDocument DbFetchData18_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData18_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData18_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><OrderNumber></OrderNumber></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData18.ExpectedOutputProperties = DbFetchData18_ExpectedOutputProperties_Document;
            XmlDocument StServiceCallActivity9_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity9_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity9_InputEnvelope_Document.LoadXml(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"">
  <Body>
    <GetFlights xmlns=""HP.SOAQ.SampleApp"">
      <DepartureCity>{DataSource.GetFlights_Input_1!MainDetails.DepartureCity}</DepartureCity>
      <ArrivalCity>{DataSource.GetFlights_Input_1!MainDetails.ArrivalCity}</ArrivalCity>
      <FlightDate>2021-08-31T12:00:00-05:00</FlightDate>
    </GetFlights>
  </Body>
</Envelope>");
            _flow.StServiceCallActivity9.InputEnvelope = StServiceCallActivity9_InputEnvelope_Document;
            _flow.StServiceCallActivity9.Comment = @"";
            _flow.StServiceCallActivity9.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity9.Name = @"GetFlights";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity9.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity9.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity9.Operation = @"GetFlights";
            _flow.StServiceCallActivity9.IsOneWay = false;
            _flow.StServiceCallActivity9.SendRequestToService=true;
            _flow.StServiceCallActivity9.FaultExpected=false;
            _flow.StServiceCallActivity9.IsAsync=false;
            _flow.StServiceCallActivity9.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity9.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity9_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity9_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity9_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity9.ChannelBindingXml = StServiceCallActivity9_ChannelBindingXml;
            VTDPropertyInfoBase pi52 = new VTDPropertyInfoBase("DepartureCity");
            VTDBaseGetter binding_getter27 = new VTDObjectGetter(pi52);
            VTDPropertyInfoBase pi53 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter26 = new VTDXPathSetter(pi53,XmlTypeCode.String);
            binding_setter26 = new StringFormaterDecorator(binding_setter26,"{DataSource.GetFlights_Input_1!MainDetails.DepartureCity}");
            bind_dir26 = new BindDirection(this.DataCursorActivity56,binding_getter27,binding_setter26,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir26);
            VTDPropertyInfoBase pi54 = new VTDPropertyInfoBase("ArrivalCity");
            VTDBaseGetter binding_getter28 = new VTDObjectGetter(pi54);
            VTDPropertyInfoBase pi55 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter27 = new VTDXPathSetter(pi55,XmlTypeCode.String);
            binding_setter27 = new StringFormaterDecorator(binding_setter27,"{DataSource.GetFlights_Input_1!MainDetails.ArrivalCity}");
            bind_dir27 = new BindDirection(this.DataCursorActivity56,binding_getter28,binding_setter27,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir27);
            XmlDocument StServiceCallActivity9_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity9.ExpectedOutputAttachments = StServiceCallActivity9_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity9_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity9.ExpectedFaultProperties = StServiceCallActivity9_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity9_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity9.ExpectedOutputProperties = StServiceCallActivity9_ExpectedOutputProperties_Document;
            XmlDocument StServiceCallActivity13_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity13_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity13_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>John Smith</CustomerName><DepartureDate>{Step.InputProperties.StServiceCallActivity9.Body.GetFlights.FlightDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity9.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>1</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity13.InputEnvelope = StServiceCallActivity13_InputEnvelope_Document;
            _flow.StServiceCallActivity13.Comment = @"";
            _flow.StServiceCallActivity13.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity13.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity13.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity13.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity13.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity13.IsOneWay = false;
            _flow.StServiceCallActivity13.SendRequestToService=true;
            _flow.StServiceCallActivity13.FaultExpected=false;
            _flow.StServiceCallActivity13.IsAsync=false;
            _flow.StServiceCallActivity13.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity13.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity13_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity13_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity13_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity13.ChannelBindingXml = StServiceCallActivity13_ChannelBindingXml;
            VTDPropertyInfoBase pi56 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter29 = new VTDXPathGetter(pi56,XmlTypeCode.Int);
            binding_getter29 = new XPathGetterDecorator(binding_getter29,"{Array0}",1);
            VTDPropertyInfoBase pi57 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter28 = new VTDXPathSetter(pi57,XmlTypeCode.Int);
            bind_dir28 = new BindDirection(_flow.StServiceCallActivity9,binding_getter29,binding_setter28,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity13.InDirections.Add(bind_dir28);
            VTDPropertyInfoBase pi58 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseGetter binding_getter30 = new VTDXPathGetter(pi58,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi59 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter29 = new VTDXPathSetter(pi59,XmlTypeCode.DateTime);
            bind_dir29 = new BindDirection(_flow.StServiceCallActivity9,binding_getter30,binding_setter29,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity13.InDirections.Add(bind_dir29);
            XmlDocument StServiceCallActivity13_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity13.ExpectedOutputAttachments = StServiceCallActivity13_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity13_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity13.ExpectedFaultProperties = StServiceCallActivity13_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity13_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber>{Step.OutputProperties.DbFetchData18.ResultTable.Row[1].OrderNumber}</OrderNumber><TotalPrice /></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity13.ExpectedOutputProperties = StServiceCallActivity13_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi60 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter31 = new VTDXPathGetter(pi60,XmlTypeCode.Int);
            binding_getter31 = new XPathGetterDecorator(binding_getter31,"{Array0}",1);
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter30 = new VTDCheckpointSetter(XmlTypeCode.Int);
            bind_dir30 = new BindDirection(_flow.DbFetchData18,binding_getter31,binding_setter30,BindTargetType.ToInProperty);
            set_StServiceCallActivity13_checkpoints(_flow.StServiceCallActivity13);
            _flow.ConcatenateStringsActivity44.Prefix = @"Order #{Step.OutputProperties.StServiceCallActivity13.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber} price total: ";
            _flow.ConcatenateStringsActivity44.Suffix = @"${Step.OutputProperties.StServiceCallActivity13.Body.CreateFlightOrderResponse.CreateFlightOrderResult.TotalPrice}";
            _flow.ConcatenateStringsActivity44.Comment = @"";
            _flow.ConcatenateStringsActivity44.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity44.Name = @"Concatenate Strings";
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='TotalPrice'][1]");
            VTDBaseGetter binding_getter32 = new VTDXPathGetter(pi62,XmlTypeCode.Float);
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter31 = new VTDObjectSetter(pi63);
            binding_setter31 = new StringFormaterDecorator(binding_setter31,"{Step.OutputProperties.StServiceCallActivity13.Body.CreateFlightOrderResponse.CreateFlightOrderResult.TotalPrice}");
            bind_dir31 = new BindDirection(_flow.StServiceCallActivity13,binding_getter32,binding_setter31,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity44.InDirections.Add(bind_dir31);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter33 = new VTDXPathGetter(pi64,XmlTypeCode.Int);
            VTDPropertyInfoBase pi65 = new VTDPropertyInfoBase("Prefix");
            VTDBaseSetter binding_setter32 = new VTDObjectSetter(pi65);
            binding_setter32 = new StringFormaterDecorator(binding_setter32,"{Step.OutputProperties.StServiceCallActivity13.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir32 = new BindDirection(_flow.StServiceCallActivity13,binding_getter33,binding_setter32,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity44.InDirections.Add(bind_dir32);
            _flow.ReportMessageActivity43.Status = @"Pass";
            _flow.ReportMessageActivity43.Message = @"{Step.OutputProperties.ConcatenateStringsActivity44.Result}";
            _flow.ReportMessageActivity43.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity43.Comment = @"";
            _flow.ReportMessageActivity43.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity43.Name = @"Report Message";
            VTDPropertyInfoBase pi66 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter34 = new VTDObjectGetter(pi66);
            VTDPropertyInfoBase pi67 = new VTDPropertyInfoBase("Message");
            VTDBaseSetter binding_setter33 = new VTDObjectSetter(pi67);
            binding_setter33 = new StringFormaterDecorator(binding_setter33,"{Step.OutputProperties.ConcatenateStringsActivity44.Result}");
            bind_dir33 = new BindDirection(_flow.ConcatenateStringsActivity44,binding_getter34,binding_setter33,BindTargetType.ToInProperty);
            _flow.ReportMessageActivity43.InDirections.Add(bind_dir33);
            XmlDocument StServiceCallActivity32_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity32_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity32_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrder xmlns=""HP.SOAQ.SampleApp""><OrderNumber>{Step.OutputProperties.StServiceCallActivity25.Body.GetFlightOrdersResponse.GetFlightOrdersResult.FlightOrder[{Step.OutputProperties.Loop33.CurrentIterationNumber}].OrderNumber}</OrderNumber></DeleteFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity32.InputEnvelope = StServiceCallActivity32_InputEnvelope_Document;
            _flow.StServiceCallActivity32.Comment = @"";
            _flow.StServiceCallActivity32.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity32.Name = @"DeleteFlightOrder";
            _flow.StServiceCallActivity32.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity32.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/HPFlights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity32.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity32.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/DeleteFlightOrder";
            _flow.StServiceCallActivity32.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity32.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity32.Service = @"HPFlights_Service";
            _flow.StServiceCallActivity32.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity32.Operation = @"DeleteFlightOrder";
            _flow.StServiceCallActivity32.IsOneWay = false;
            _flow.StServiceCallActivity32.IsSkip = false;
            _flow.StServiceCallActivity32.SendRequestToService=true;
            _flow.StServiceCallActivity32.FaultExpected=false;
            _flow.StServiceCallActivity32.IsAsync=false;
            _flow.StServiceCallActivity32.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity32.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity32_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity32_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity32_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity32.ChannelBindingXml = StServiceCallActivity32_ChannelBindingXml;
            VTDPropertyInfoBase pi68 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter35 = new VTDObjectGetter(pi68);
            VTDPropertyInfoBase pi69 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][{Array0}]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter36 = new VTDXPathGetter(pi69,XmlTypeCode.Int);
            binding_getter36 = new XPathGetterDecorator(binding_getter36,"{Array0}",binding_getter35,_flow.Loop33);
            VTDPropertyInfoBase pi70 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='DeleteFlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter34 = new VTDXPathSetter(pi70,XmlTypeCode.Int);
            bind_dir34 = new BindDirection(_flow.StServiceCallActivity25,binding_getter36,binding_setter34,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity32.InDirections.Add(bind_dir34);
            XmlDocument StServiceCallActivity32_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity32_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity32_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity32.ExpectedOutputAttachments = StServiceCallActivity32_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity32_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity32_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity32_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity32.ExpectedFaultProperties = StServiceCallActivity32_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity32_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity32_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity32_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity32.ExpectedOutputProperties = StServiceCallActivity32_ExpectedOutputProperties_Document;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    